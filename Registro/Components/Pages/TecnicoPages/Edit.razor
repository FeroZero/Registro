@page "/Tecnico/Editar/{TecnicoId:int}"
@inject TecnicoService tecnicosService
@inject NavigationManager navigate
@rendermode InteractiveServer

<PageTitle>Editar</PageTitle>
<EditForm Model="tecnico" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*header*@
			<div class="card-header">
				<div class="card-title">Editar T&eacutecnico</div>
			</div>
			@*body*@
			<div class="card-body">
				<div class="row">
					<div class="col-3 ms-5">
						@*Nombres*@
						<label class="form-label"><strong>Nombres</strong></label>
						<InputText class="form-control" @bind-Value="tecnico.Nombres"></InputText>
						<ValidationMessage For="(()=> tecnico.Nombres)" />
					</div>
					<div class="col-3 ms-5">
						@*SueldoHora*@
						<label class="form-label"><strong>Sueldo por hora</strong></label>
						<InputNumber class="form-control" @bind-Value="tecnico.SueldoHora"></InputNumber>
						<ValidationMessage For="(()=> tecnico.SueldoHora)" />
					</div>
				</div>
				<div class="col-3 ms-5">
					<h6>@Alerta</h6>
				</div>
			</div>
			@*footer*@
			<div class="card-footer text-center">
				<a href="/Tecnico/Index" class="btn btn-outline-primary">Volver</a>
				<button type="submit" class="btn btn-outline-success">Guardar</button>
			</div>
		</div>
	</div>
</EditForm>


@code {
	[Parameter]
	public int TecnicoId { get; set; }
	public Tecnicos tecnico { get; set; } = new Tecnicos();
	public string Alerta { get; set; }

	protected override async Task OnInitializedAsync()
	{
		tecnico = await tecnicosService.Buscar(TecnicoId);
	}

	public async Task Guardar()
	{
		if (await Existe())
		{
			Alerta = "Ya existe un usuario con este nombre.";
			return;
		}
		var guardar = await tecnicosService.Guardar(tecnico);
		navigate.NavigateTo("/Tecnico/Index");
	}

	public async Task<bool> Existe()
	{
		var existe = await tecnicosService.ExisteTecnico(tecnico.Nombres, tecnico.TecnicoId);
		return existe;
	}
}
